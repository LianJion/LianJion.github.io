<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浪荡起来</title>
  
  <subtitle>山色葱笼入胜境 空谷低回溪流声</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lianjion.github.io/"/>
  <updated>2018-03-13T13:31:40.785Z</updated>
  <id>https://lianjion.github.io/</id>
  
  <author>
    <name>Lian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>three-chapter-img-2</title>
    <link href="https://lianjion.github.io/2018/03/13/three-chapter-img-2/"/>
    <id>https://lianjion.github.io/2018/03/13/three-chapter-img-2/</id>
    <published>2018-03-13T11:15:43.000Z</published>
    <updated>2018-03-13T13:31:40.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天绘制一个图形练练手"><a href="#今天绘制一个图形练练手" class="headerlink" title="今天绘制一个图形练练手"></a>今天绘制一个图形练练手</h3><blockquote><p>设置坐标位置 奇怪了！ 坐标设置是（x, z, y）<br>cube.position.set(-10, 4, 0);</p></blockquote><p><img src="/2018/03/13/three-chapter-img-2/two.png" alt="冰糖葫芦传、大花生"></p><h4 id="动画轨迹-——-弹跳轨迹"><a href="#动画轨迹-——-弹跳轨迹" class="headerlink" title="动画轨迹 —— 弹跳轨迹"></a>动画轨迹 —— 弹跳轨迹</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">step += <span class="number">0.04</span>;</span><br><span class="line">sphere.position.x = <span class="number">20</span> + (<span class="number">10</span> * (<span class="built_in">Math</span>.cos(step)));</span><br><span class="line">sphere.position.y = <span class="number">2</span> + (<span class="number">10</span> * <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.sin(step)));</span><br></pre></td></tr></table></figure><h4 id="辅助动画库-————-Stats-js-和-dat-gui-js"><a href="#辅助动画库-————-Stats-js-和-dat-gui-js" class="headerlink" title="辅助动画库 ———— Stats.js 和 dat.gui.js"></a>辅助动画库 ———— Stats.js 和 dat.gui.js</h4><p>1 动态显示跟踪fps库 Stats.js </p><blockquote><p>监测fps(画面每秒传输帧数),比如说 24fps，就是24帧每秒的意思。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line">stats.showPanel(panelType); <span class="comment">// 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(stats.dom);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用时实时更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderScene</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实时更新</span></span><br><span class="line">    stats.update();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rotate the cube around its axes</span></span><br><span class="line">    cube.rotation.x += <span class="number">0.02</span>;</span><br><span class="line">    cube.rotation.y += <span class="number">0.02</span>;</span><br><span class="line">    cube.rotation.z += <span class="number">0.02</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bounce the sphere up and down</span></span><br><span class="line">    step += <span class="number">0.04</span>;</span><br><span class="line">    sphere.position.x = <span class="number">20</span> + (<span class="number">10</span> * (<span class="built_in">Math</span>.cos(step)));</span><br><span class="line">    sphere.position.y = <span class="number">2</span> + (<span class="number">10</span> * <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.sin(step)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render using requestAnimationFrame</span></span><br><span class="line">    requestAnimationFrame(renderScene);</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 动态调节变量 dat.gui.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象，里面存放动态变量，并为其赋初始值</span></span><br><span class="line"><span class="keyword">var</span> controls = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rotationSpeed = <span class="number">0.02</span>;  <span class="comment">// 旋转速度</span></span><br><span class="line">    <span class="keyword">this</span>.bouncingSpeed = <span class="number">0.03</span>;  <span class="comment">// 弹跳速度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gui = <span class="keyword">new</span> dat.GUI();</span><br><span class="line"><span class="comment">// 利用gui设置 动态值的 范围</span></span><br><span class="line">gui.add(controls, <span class="string">'rotationSpeed'</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">gui.add(controls, <span class="string">'bouncingSpeed'</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用变量</span></span><br><span class="line">cube.rotation.x += controls.rotationSpeed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bounce the sphere up and down</span></span><br><span class="line"><span class="keyword">var</span> step = <span class="number">0</span>;</span><br><span class="line">step += controls.bouncingSpeed;</span><br><span class="line">sphere.position.x = <span class="number">20</span> + (<span class="number">10</span> * (<span class="built_in">Math</span>.cos(step)));</span><br><span class="line">sphere.position.y = <span class="number">2</span> + (<span class="number">10</span> * <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.sin(step)));</span><br></pre></td></tr></table></figure><h4 id="窗口响应式调整"><a href="#窗口响应式调整" class="headerlink" title="窗口响应式调整"></a>窗口响应式调整</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 原来的设置相机</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, onResize, <span class="literal">false</span>); <span class="comment">//监听窗口变化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResize</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置透视摄像机的长宽比</span></span><br><span class="line">    camera.aspect = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight</span><br><span class="line">    <span class="comment">// 摄像机的 position 和 target 是自动更新的，而 fov、aspect、near、far 的修改则需要重新计算投影矩阵（projection matrix）</span></span><br><span class="line">    camera.updateProjectionMatrix()</span><br><span class="line">    <span class="comment">// 设置渲染器输出的 canvas 的大小</span></span><br><span class="line">    renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="场景中的相关操作方法"><a href="#场景中的相关操作方法" class="headerlink" title="场景中的相关操作方法"></a>场景中的相关操作方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除</span></span><br><span class="line">scene.remove(apple);   <span class="comment">// 该苹果烂了，被主人丢弃</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">scene.traverse(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)) </span>&#123; <span class="comment">// 每一个子对象都会执行该函数，相当于遍历场景的中的子对象</span></span><br><span class="line">    e.rotation.x += <span class="number">4</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景中的所有对象，包括相机和光源</span></span><br><span class="line">scene.children;</span><br><span class="line">scene.children.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更加场景中的对象名 返回对象</span></span><br><span class="line">scene.getObjectByName(<span class="string">'cube-0'</span>);</span><br></pre></td></tr></table></figure><h4 id="场景遍历"><a href="#场景遍历" class="headerlink" title="场景遍历"></a>场景遍历</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="场景雾化"><a href="#场景雾化" class="headerlink" title="场景雾化"></a>场景雾化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定颜色，近远</span></span><br><span class="line">scene.fog = <span class="keyword">new</span> THREE.Fog(color, near, far);</span><br><span class="line">scene.fog = <span class="keyword">new</span> THREE.Fog(<span class="number">0xffffff</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定颜色，浓度</span></span><br><span class="line">scene.fog = <span class="keyword">new</span> THREE.FogExp2(color, 浓度);</span><br><span class="line">scene.fog = <span class="keyword">new</span> THREE.FogExp2(<span class="number">0xffffff</span>, <span class="number">0.015</span>);</span><br></pre></td></tr></table></figure><h4 id="场景所有子对象统一材质"><a href="#场景所有子对象统一材质" class="headerlink" title="场景所有子对象统一材质"></a>场景所有子对象统一材质</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 一旦设置后，场景中的所有对象都会中招，头上有绿，苍天饶过谁</span></span><br><span class="line">scene.overrideMaterial = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">    color: <span class="number">0x7cf265</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="灯光效果"><a href="#灯光效果" class="headerlink" title="灯光效果"></a>灯光效果</h3><p><a href="https://www.cnblogs.com/amy2011/p/5761174.html" target="_blank" rel="noopener">光源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天绘制一个图形练练手&quot;&gt;&lt;a href=&quot;#今天绘制一个图形练练手&quot; class=&quot;headerlink&quot; title=&quot;今天绘制一个图形练练手&quot;&gt;&lt;/a&gt;今天绘制一个图形练练手&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;设置坐标位置 奇怪了！ 坐标设置是（x, 
      
    
    </summary>
    
    
      <category term="three.js" scheme="https://lianjion.github.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>three-chapter-img</title>
    <link href="https://lianjion.github.io/2018/03/12/three-chapter-img/"/>
    <id>https://lianjion.github.io/2018/03/12/three-chapter-img/</id>
    <published>2018-03-12T11:51:02.000Z</published>
    <updated>2018-03-13T01:11:14.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="three入门章总结"><a href="#three入门章总结" class="headerlink" title="three入门章总结"></a>three入门章总结</h2><blockquote><p>在Three.js中，要渲染物体到网页中，我们需要3个要素：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。</p></blockquote><h3 id="错综复杂的三角关系"><a href="#错综复杂的三角关系" class="headerlink" title="错综复杂的三角关系"></a>错综复杂的三角关系</h3><h4 id="1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。它可以保持和跟踪想要渲染的物体"><a href="#1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。它可以保持和跟踪想要渲染的物体" class="headerlink" title="1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。它可以保持和跟踪想要渲染的物体"></a>1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。它可以保持和跟踪想要渲染的物体</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"><span class="comment">// 把apple放到场景中</span></span><br><span class="line">scene.add(apple);</span><br></pre></td></tr></table></figure><h4 id="2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。"><a href="#2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。" class="headerlink" title="2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。"></a>2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);    <span class="comment">// 透视相机</span></span><br><span class="line"></span><br><span class="line">camera.position.z = <span class="number">5</span>;      <span class="comment">// 设置相机角度</span></span><br></pre></td></tr></table></figure><h4 id="3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示"><a href="#3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示" class="headerlink" title="3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示"></a>3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示</h4><h5 id="渲染形式"><a href="#渲染形式" class="headerlink" title="渲染形式"></a>渲染形式</h5><p><em>1</em> 离线渲染</p><p><em>2</em> 实时渲染：需要不停的对画面进行渲染，即使画面中什么也没有改变，也在重新渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setClearColor(xx);     <span class="comment">//设置渲染器的背景</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);  <span class="comment">//设置渲染出的场景尺寸</span></span><br><span class="line">renderer.render(scene, camera);</span><br><span class="line"><span class="comment">// 一切都是由相机决定的，它想看的什么场景，场景中 的什么，那么渲染器就会把对应的部分渲染出来</span></span><br></pre></td></tr></table></figure><blockquote><p>脑洞：摆拍达人 —— 赵大流，做了精致的午餐，是时候秀一波了！他把场景定在了砧板上，上面摆上了他的食材——萝卜，青菜，辣椒，拿起了他前不久刚入手的单反相机，左一个角度，右一个角度拍了好久，然后将拍好的照片全部晒在了朋友圈。</p></blockquote><p><img src="/2018/03/12/three-chapter-img/one.png" alt="three.js三剑客"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();  <span class="comment">// 场景</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);<span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();   <span class="comment">// 渲染器</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);   <span class="comment">// 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度</span></span><br><span class="line"><span class="comment">// 挂载到dom节点上</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br></pre></td></tr></table></figure><h3 id="简单的灯光、材质、阴影"><a href="#简单的灯光、材质、阴影" class="headerlink" title="简单的灯光、材质、阴影"></a>简单的灯光、材质、阴影</h3><h4 id="1-灯光"><a href="#1-灯光" class="headerlink" title="1 灯光"></a>1 灯光</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> spotLight = <span class="keyword">new</span> THREE.SpotLight(<span class="number">0xFFFFFF</span>);</span><br><span class="line">spotLight.position.set(<span class="number">-40</span>, <span class="number">40</span>, <span class="number">-15</span>);</span><br><span class="line">scene.add(spotLight); <span class="comment">// 灯光也需要添加到场景中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义场景中某个光源可以产生阴影</span></span><br><span class="line">spotLight.castShadow = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="2-材质"><a href="#2-材质" class="headerlink" title="2 材质"></a>2 材质</h4><p><em>1</em> three.MeshBasicMaterial()</p><blockquote><p>基础材质,不会对场景中的光源产生反应，只会以指定颜色渲染物体</p></blockquote><p><em>2</em> three.MeshLambertMaterial() // 对光源产生反应</p><p><em>3</em> three.MeshPhongMaterial()   // 对光源产生反应</p><h4 id="3-阴影"><a href="#3-阴影" class="headerlink" title="3 阴影"></a>3 阴影</h4><blockquote><p>要为有阴影的物体指定接受投影的物体</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 告诉渲染器需要阴影</span></span><br><span class="line">renderer.shadowMap.enabled = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 定义场景中某个光源可以产生阴影</span></span><br><span class="line">spotLight.castShadow = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对物体单独设置阴影</span></span><br><span class="line">cube.castShadow = <span class="literal">true</span>; <span class="comment">// 投影</span></span><br><span class="line">plane.receiveShadow = <span class="literal">true</span>; <span class="comment">// 接受投影</span></span><br></pre></td></tr></table></figure><h3 id="溯其本源"><a href="#溯其本源" class="headerlink" title="溯其本源"></a>溯其本源</h3><p>THREE.REVISION 版本号</p><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>左手反则，向心内旋转， 分别从x-y</p><blockquote><p>刚开始可能会不熟悉，所以axishelper坐标轴一定要画出来。</p></blockquote><p>绘制物体对象的坐标以中心点为标准。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h4><blockquote><p>指定一个函数，按照浏览器定义的时间间隔调用, three.js里自带了这个方法可以直接用</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;three入门章总结&quot;&gt;&lt;a href=&quot;#three入门章总结&quot; class=&quot;headerlink&quot; title=&quot;three入门章总结&quot;&gt;&lt;/a&gt;three入门章总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Three.js中，要渲染物体到网页中，我们需要
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>three-chapter-1</title>
    <link href="https://lianjion.github.io/2018/03/12/three-chapter-1/"/>
    <id>https://lianjion.github.io/2018/03/12/three-chapter-1/</id>
    <published>2018-03-12T11:40:11.000Z</published>
    <updated>2018-03-13T01:21:44.129Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="three.js" scheme="https://lianjion.github.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>github</title>
    <link href="https://lianjion.github.io/2018/03/05/github/"/>
    <id>https://lianjion.github.io/2018/03/05/github/</id>
    <published>2018-03-05T11:31:33.000Z</published>
    <updated>2018-03-06T01:04:36.056Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="惠风和畅" scheme="https://lianjion.github.io/categories/%E6%83%A0%E9%A3%8E%E5%92%8C%E7%95%85/"/>
    
    
      <category term="天朗气清" scheme="https://lianjion.github.io/tags/%E5%A4%A9%E6%9C%97%E6%B0%94%E6%B8%85/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://lianjion.github.io/2018/03/05/webpack/"/>
    <id>https://lianjion.github.io/2018/03/05/webpack/</id>
    <published>2018-03-05T11:20:51.000Z</published>
    <updated>2018-03-05T11:23:09.819Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插件里引用依赖"><a href="#插件里引用依赖" class="headerlink" title="插件里引用依赖"></a>插件里引用依赖</h4><blockquote><p>怕是生疏了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;插件里引用依赖&quot;&gt;&lt;a href=&quot;#插件里引用依赖&quot; class=&quot;headerlink&quot; title=&quot;插件里引用依赖&quot;&gt;&lt;/a&gt;插件里引用依赖&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;怕是生疏了。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="css" scheme="https://lianjion.github.io/tags/css/"/>
    
      <category term="js" scheme="https://lianjion.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hello-material</title>
    <link href="https://lianjion.github.io/2018/03/05/hello-material/"/>
    <id>https://lianjion.github.io/2018/03/05/hello-material/</id>
    <published>2018-03-05T09:20:07.000Z</published>
    <updated>2018-03-05T09:20:07.079Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello-lian</title>
    <link href="https://lianjion.github.io/2018/03/05/hello-lian/"/>
    <id>https://lianjion.github.io/2018/03/05/hello-lian/</id>
    <published>2018-03-05T07:35:20.000Z</published>
    <updated>2018-03-05T09:11:25.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我简直不要太帅"><a href="#我简直不要太帅" class="headerlink" title="我简直不要太帅"></a>我简直不要太帅</h2><blockquote><p>找到了一个挺好看的主题，比较心水。麻溜地使用起来！</p></blockquote><h4 id="第一篇blog就献给hexo和他的主题们吧！"><a href="#第一篇blog就献给hexo和他的主题们吧！" class="headerlink" title="第一篇blog就献给hexo和他的主题们吧！"></a>第一篇blog就献给hexo和他的主题们吧！</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我简直不要太帅&quot;&gt;&lt;a href=&quot;#我简直不要太帅&quot; class=&quot;headerlink&quot; title=&quot;我简直不要太帅&quot;&gt;&lt;/a&gt;我简直不要太帅&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;找到了一个挺好看的主题，比较心水。麻溜地使用起来！&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lianjion.github.io/2018/03/05/hello-world/"/>
    <id>https://lianjion.github.io/2018/03/05/hello-world/</id>
    <published>2018-03-05T07:10:11.552Z</published>
    <updated>2018-03-05T07:10:11.552Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
