<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[three-chapter-img]]></title>
    <url>%2F2018%2F03%2F12%2Fthree-chapter-img%2F</url>
    <content type="text"><![CDATA[three入门章总结 在Three.js中，要渲染物体到网页中，我们需要3个要素：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。 错综复杂的三角关系1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。它可以保持和跟踪想要渲染的物体1234var scene = new THREE.Scene();// 把apple放到场景中scene.add(apple); 2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。123var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000); // 透视相机camera.position.z = 5; // 设置相机角度 3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示渲染形式1 离线渲染 2 实时渲染：需要不停的对画面进行渲染，即使画面中什么也没有改变，也在重新渲染。 12345var renderer = new THREE.WebGLRenderer();renderer.setClearColor(xx); //设置渲染器的背景renderer.setSize(window.innerWidth, window.innerHeight); //设置渲染出的场景尺寸renderer.render(scene, camera);// 一切都是由相机决定的，它想看的什么场景，场景中 的什么，那么渲染器就会把对应的部分渲染出来 脑洞：摆拍达人 —— 赵大流，做了精致的午餐，是时候秀一波了！他把场景定在了砧板上，上面摆上了他的食材——萝卜，青菜，辣椒，拿起了他前不久刚入手的单反相机，左一个角度，右一个角度拍了好久，然后将拍好的照片全部晒在了朋友圈。 1234567var scene = new THREE.Scene(); // 场景var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机var renderer = new THREE.WebGLRenderer(); // 渲染器renderer.setSize(window.innerWidth, window.innerHeight); // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度// 挂载到dom节点上document.body.appendChild(renderer.domElement); 简单的灯光、材质、阴影1 灯光1234567var spotLight = new THREE.SpotLight(0xFFFFFF);spotLight.position.set(-40, 40, -15);scene.add(spotLight); // 灯光也需要添加到场景中// 定义场景中某个光源可以产生阴影spotLight.castShadow = true; 2 材质1 three.MeshBasicMaterial() 基础材质,不会对场景中的光源产生反应，只会以指定颜色渲染物体 2 three.MeshLambertMaterial() // 对光源产生反应 3 three.MeshPhongMaterial() // 对光源产生反应 3 阴影 要为有阴影的物体指定接受投影的物体 12345678// 告诉渲染器需要阴影renderer.shadowMap.enabled = true;// 定义场景中某个光源可以产生阴影spotLight.castShadow = true;// 针对物体单独设置阴影cube.castShadow = true; // 投影plane.receiveShadow = true; // 接受投影 溯其本源THREE.REVISION 版本号 坐标左手反则，向心内旋转， 分别从x-y 刚开始可能会不熟悉，所以axishelper坐标轴一定要画出来。 绘制物体对象的坐标以中心点为标准。 动画requestAnimationFrame() 指定一个函数，按照浏览器定义的时间间隔调用, three.js里自带了这个方法可以直接用]]></content>
  </entry>
  <entry>
    <title><![CDATA[three-chapter-1]]></title>
    <url>%2F2018%2F03%2F12%2Fthree-chapter-1%2F</url>
    <content type="text"><![CDATA[three入门章总结 在Three.js中，要渲染物体到网页中，我们需要3个要素：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。 错综复杂的三角关系1号选手：场景（scene）是一个物体的容器，开发者可以将需要的角色放入场景中，例如苹果、葡萄。同时，苹果、葡萄自身也管理着其在场景中的位置。2号选手：相机（camera）是面对场景，在场景中取一个合适的景，把它拍下来。3号选手：渲染器（renderer）是将相机拍摄下来的图片，放到浏览器中去显示 脑洞：摆拍达人 —— 赵大流，做了精致的午餐，是时候秀一波了！他把场景定在了砧板上，上面摆上了他的食材——萝卜，青菜，辣椒，拿起了他前不久刚入手的单反相机，左一个角度，右一个角度拍了好久，然后将拍好的照片全部晒在了朋友圈。]]></content>
      <tags>
        <tag>three.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github]]></title>
    <url>%2F2018%2F03%2F05%2Fgithub%2F</url>
    <content type="text"></content>
      <categories>
        <category>惠风和畅</category>
      </categories>
      <tags>
        <tag>天朗气清</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack]]></title>
    <url>%2F2018%2F03%2F05%2Fwebpack%2F</url>
    <content type="text"><![CDATA[插件里引用依赖 怕是生疏了。]]></content>
      <tags>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-material]]></title>
    <url>%2F2018%2F03%2F05%2Fhello-material%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[hello-lian]]></title>
    <url>%2F2018%2F03%2F05%2Fhello-lian%2F</url>
    <content type="text"><![CDATA[我简直不要太帅 找到了一个挺好看的主题，比较心水。麻溜地使用起来！ 第一篇blog就献给hexo和他的主题们吧！]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
